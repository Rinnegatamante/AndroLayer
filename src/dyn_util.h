#ifndef _DYN_UTIL_H_
#define _DYN_UTIL_H_

void _glActiveTexture(GLenum t);
void _glAttachShader(GLuint prog, GLuint shad);
void _glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
void _glBindBuffer(GLenum target, GLuint buffer);
void _glBindFramebuffer(GLenum target, GLuint framebuffer);
void _glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void _glBindTexture(GLenum target, GLuint texture);
void _glBlendFunc(GLenum sfactor, GLenum dfactor);
void _glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void _glBufferData(GLenum target, GLsizei size, const GLvoid *data, GLenum usage);
GLenum _glCheckFramebufferStatus(GLenum target);
void _glClear(GLbitfield mask);
void _glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void _glClearDepthf(GLclampf depth);
void _glClearStencil(GLint s);
void _glCompileShader(GLuint shader);
void _glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLuint _glCreateProgram();
GLuint _glCreateShader(GLenum shaderType);
void _glCullFace(GLenum mode);
void _glDeleteBuffers(GLsizei n, const GLuint *gl_buffers);
void _glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
void _glDeleteProgram(GLuint prog);
void _glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
void _glDeleteShader(GLuint shad);
void _glDeleteTextures(GLsizei n, const GLuint *textures);
void _glDepthFunc(GLenum func);
void _glDepthMask(GLboolean flag);
void _glDepthRangef(GLfloat nearVal, GLfloat farVal);
void _glDisable(GLenum cap);
void _glDisableVertexAttribArray(GLuint index);
void _glDrawArrays(GLenum mode, GLint first, GLsizei count);
void _glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void _glEnable(GLenum cap);
void _glEnableVertexAttribArray(GLuint index);
void _glFinish();
void _glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void _glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void _glFrontFace(GLenum mode);
void _glGenBuffers(GLsizei n, GLuint *buffers);
void _glGenFramebuffers(GLsizei n, GLuint *framebuffers);
void _glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
void _glGenTextures(GLsizei n, GLuint *textures);
GLint _glGetAttribLocation(GLuint prog, const GLchar *name);
GLenum _glGetError();
void _glGetBooleanv(GLenum pname, GLboolean *params);
void _glGetIntegerv(GLenum pname, GLint *data);
void _glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void _glGetProgramiv(GLuint program, GLenum pname, GLint *params);
void _glGetShaderInfoLog(GLuint handle, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void _glGetShaderiv(GLuint handle, GLenum pname, GLint *params);
const GLubyte *_glGetString(GLenum name);
GLint _glGetUniformLocation(GLuint prog, const GLchar *name);
void _glHint(GLenum target, GLenum mode);
void _glLinkProgram(GLuint progr);
void _glPolygonOffset(GLfloat factor, GLfloat units);
void _glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *data);
void _glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void _glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void _glShaderSource(GLuint handle, GLsizei count, const GLchar *const *string, const GLint *length);
void _glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *data);
void _glTexParameterf(GLenum target, GLenum pname, GLfloat param);
void _glTexParameteri(GLenum target, GLenum pname, GLint param);
void _glUniform1f(GLint location, GLfloat v0);
void _glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
void _glUniform1i(GLint location, GLint v0);
void _glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
void _glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void _glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
void _glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
void _glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void _glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void _glUseProgram(GLuint program);
void _glVertexAttrib4fv(GLuint index, const GLfloat *v);
void _glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
void _glViewport(GLint x, GLint y, GLsizei width, GLsizei height);

#endif